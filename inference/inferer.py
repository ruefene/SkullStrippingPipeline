import os

import pyradise.fileio as ps_fio

from .pipeline import get_pipeline


class Inferer:

    def __init__(self,
                 input_dir_path: str,
                 output_dir_path: str,
                 model_path: str,
                 identifier: str,
                 as_zip: bool = True
                 ) -> None:

        if not os.path.exists(input_dir_path):
            raise ValueError(f'Input directory does not exist: {input_dir_path}')
        self.input_dir_path = input_dir_path


        if not os.path.exists(output_dir_path):
            raise ValueError(f'Output directory does not exist: {output_dir_path}')
        self.output_dir_path = output_dir_path

        if not os.path.exists(model_path):
            raise ValueError(f'Model does not exist: {model_path}')
        self.model_path = model_path

        self.identifier = identifier
        self.as_zip = as_zip

        # get the pipeline
        self.pipeline = get_pipeline(model_path)

    def execute(self) -> bool:

        try:
            # Crawl the data in the input directory
            crawler = ps_fio.SubjectDicomCrawler(self.input_dir_path)
            series_info = crawler.execute()

            # Select the required modalities
            used_modalities = ('T1', 'T2')
            modality_selector = ps_fio.ModalityInfoSelector(used_modalities)
            series_info = modality_selector.execute(series_info)

            # Exclude the existing DICOM-RTSS files
            no_rtss_selector = ps_fio.NoRTSSInfoSelector()
            series_info = no_rtss_selector.execute(series_info)

            # Construct the loader and load the subject
            loader = ps_fio.SubjectLoader()
            subject = loader.load(series_info)

            # Construct the pipeline and execute it
            pipeline = get_pipeline(self.model_path)
            subject = pipeline.execute(subject)

            # Define the customizable metadata for the DICOM-RTSS
            meta_data = ps_fio.RTSSMetaData(series_description='Autogenerated RTSS',
                                            series_number='10',
                                            operators_name='Auto-Segmentation Alg.')

            # Convert the segmentations to a DICOM-RTSS
            reference_modality = 'T1'
            conv_conf = ps_fio.RTSSConverter3DConfiguration()
            converter = ps_fio.SubjectToRTSSConverter(subject,
                                                      series_info,
                                                      reference_modality,
                                                      conv_conf,
                                                      meta_data)
            rtss_dataset = converter.convert()

            # Save the new DICOM-RTSS
            named_rtss = (('rtss.dcm', rtss_dataset),)
            writer = ps_fio.DicomSeriesSubjectWriter(self.as_zip)
            writer.write(named_rtss,
                         self.output_dir_path,
                         self.identifier,
                         series_info)
            return True

        except Exception as e:
            print(e)
            return False
